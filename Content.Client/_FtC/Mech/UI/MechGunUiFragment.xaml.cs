using Content.Shared._FtC.Mech;
using Content.Shared.Timing;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client._FtC.Mech.UI;

[GenerateTypedNameReferences]
public sealed partial class MechGunUiFragment : BoxContainer
{
    [Dependency] private readonly IGameTiming _timing = default!;

    public event Action<EntityUid?>? ReloadAction;
    public EntityUid? FragmentOwner;
    private StartEndTime _relo_FtCimer;
    public float Relo_FtCime = 10f;

    public MechGunUiFragment()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        var curTime = _timing.CurTime;

        var progress = _relo_FtCimer.ProgressAt(curTime);

        ReloadButton.OnPressed += _ => ReloadAction?.Invoke(FragmentOwner);

        if (progress >= 1 && ReloadButton.Disabled)
            ReloadButton.Disabled = false;
    }
    public void UpdateContents(MechGunUiState state)
    {
        Relo_FtCime = state.Relo_FtCime;

        if (state.Reloading && state.ReloadEndTime != null)
        {
            _relo_FtCimer.End = state.ReloadEndTime.Value;
            _relo_FtCimer.Start = state.ReloadEndTime.Value - TimeSpan.FromSeconds(Relo_FtCime);
            ReloadButton.Disabled = true;
            return;
        }

        ShotsCount.Text = $"{state.Shots} / {state.Capacity}";
    }

    public void StartTimer()
    {
        var curTime = _timing.CurTime;
        _relo_FtCimer.Start = curTime;
        _relo_FtCimer.End = curTime + TimeSpan.FromSeconds(Relo_FtCime);
        ReloadButton.Disabled = true;
    }
}
